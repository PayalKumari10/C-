#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void append(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " -> ";
            current = current->next;
        }
        std::cout << "nullptr" << std::endl;
    }

    void rotateRight(int k) {
        if (head == nullptr || k <= 0) {
            return;
        }

        int length = 1;
        Node* tail = head;

        while (tail->next != nullptr) {
            tail = tail->next;
            length++;
        }

        k = k % length;  // Adjust k in case it's larger than the length of the list

        if (k == 0) {
            return;
        }

        Node* newTail = head;
        for (int i = 1; i < length - k; i++) {
            newTail = newTail->next;
        }

        Node* newHead = newTail->next;
        newTail->next = nullptr;
        tail->next = head;
        head = newHead;
    }
};

int main() {
    LinkedList list;
    list.append(1);
    list.append(2);
    list.append(3);
    list.append(4);
    list.append(5);

    std::cout << "Original Linked List:" << std::endl;
    list.display();

    int k = 2;
    list.rotateRight(k);

    std::cout << "Linked List after rotating " << k << " positions to the right:" << std::endl;
    list.display();

    return 0;
}
